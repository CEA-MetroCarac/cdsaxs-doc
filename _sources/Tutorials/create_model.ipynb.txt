{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# How to create a simulation Model for cdsaxs?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First let's start by doing necessary imports (make sure that cdsaxs is installed in your environment)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from cdsaxs.simulations.base import Simulation, Geometry"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Create the Simulation Class\n",
    "\n",
    "   Your simulation class should inherit from the `Simulation` protocol. This class is where the core logic of your simulation resides. It should use the geometric data from the `Geometry` class to set up and run the simulation.\n",
    "\n",
    "   Ensure that the `simulate_diffraction` method is implemented to perform the simulation. Depending on the complexity of your model, this method might involve extensive calculations or integrations.\n",
    "\n",
    "   If your simulation will be used in conjunction with a `Fitter` class, make sure to implement the `set_from_fitter` method. This will enable your simulation to correctly handle data provided by the `Fitter` and return results in a format that the `Fitter` can use.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "class CylinderSimulation(Simulation):\n",
    "    \"\"\"A class representing a simulation of a cylinder for diffraction pattern calculation.\"\"\"\n",
    "\n",
    "    def __init__(self, qys, qzs, from_fitter=False, initial_guess=None):\n",
    "        \"\"\"Initializes the CylinderSimulation object.\n",
    "\n",
    "        Args:\n",
    "            qys (array-like): The q-values in the y-direction for diffraction calculation.\n",
    "            qzs (array-like): The q-values in the z-direction for diffraction calculation.\n",
    "            from_fitter (bool, optional): Indicates if the parameters should be taken from the fitter. Defaults to False.\n",
    "\n",
    "        \"\"\"\n",
    "        self.qys = qys\n",
    "        self.qzs = qzs\n",
    "        self.from_fitter = from_fitter\n",
    "        self.CylinderGeometry = CylinderGeometry(from_fitter=from_fitter, initial_guess=initial_guess)\n",
    "        self.CylinderDiffraction = CylinderDiffraction(CylinderGeometry=self.CylinderGeometry)\n",
    "\n",
    "    def simulate_diffraction(self, params=None):\n",
    "        \"\"\"Simulates the diffraction pattern of the cylinder.\n",
    "\n",
    "        Args:\n",
    "            params (dict, optional): Parameters for the cylinder. Defaults to None.\n",
    "        Returns:\n",
    "            intensity (array-like): A 2D array of floats containing the intensity.\n",
    "        \"\"\"        \n",
    "        intensity = self.CylinderDiffraction.calculate_intensity(self.qys, self.qzs, params)\n",
    "\n",
    "        if not self.from_fitter:\n",
    "            return intensity[0]\n",
    "\n",
    "        return intensity\n",
    "    \n",
    "    def set_from_fitter(self, from_fitter):\n",
    "        \"\"\"Sets the parameters of the simulation from the fitter.\n",
    "\n",
    "        Args:\n",
    "            from_fitter (Fitter): The fitter object.\n",
    "        \"\"\"\n",
    "        self.from_fitter = from_fitter\n",
    "        self.CylinderGeometry.from_fitter = from_fitter\n",
    "        #You can also use this method to do all the intialization neccesary for fitting.\n",
    "        self.CylinderGeometry.set_initial_guess_dataframe()\n",
    "\n",
    "    @property\n",
    "    def geometry(self):\n",
    "        \"\"\"Returns the geometry of the simulation. This is necessary so that any external object can access the geometry of the simulation\n",
    "        without having to know the internal structure of the simulation object.\n",
    "\n",
    "        Returns:\n",
    "            CylinderGeometry: The geometry of the simulation.\n",
    "        \"\"\"\n",
    "        return self.CylinderGeometry"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Define the Geometry Class\n",
    "\n",
    "   Create a class that implements the `Geometry` protocol. This class should define the specific geometric properties of the system being simulated. For example, in a model of stacked trapezoids, this class would define the dimensions, angles, and positions of the trapezoids.\n",
    "\n",
    "   Implement the `convert_to_dataframe` method to organize the input parameters into a structured format suitable for the simulation. This method is crucial for ensuring that the parameters can be easily interpreted and manipulated by the `Fitter` class.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "class CylinderGeometry(Geometry):\n",
    "    \"\"\"A class representing the geometry of a cylinder.\"\"\"\n",
    "\n",
    "    def __init__(self, from_fitter=False, initial_guess=None):\n",
    "        \"\"\"Initializes the CylinderGeometry object.\n",
    "\n",
    "        Args:\n",
    "            from_fitter (bool, optional): Indicates if the parameters should be taken from the fitter. Defaults to False.\n",
    "        \"\"\"\n",
    "        self.from_fitter = from_fitter\n",
    "        self.initial_guess = initial_guess\n",
    "        self.initial_guess_dataframe = None\n",
    "\n",
    "    def set_initial_guess_dataframe(self):\n",
    "        \"\"\"if the function is being called by the fitter this function sets the initial guess for the parameters.\n",
    "\n",
    "        Args:\n",
    "            initial_guess (dict): The initial guess for the parameters.\n",
    "        \"\"\"\n",
    "        self.initial_guess_dataframe = pd.DataFrame(self.initial_guess, index=[0])\n",
    "\n",
    "    def convert_to_dataframe(self, params):\n",
    "        \"\"\"Converts the parameters to a DataFrame.\n",
    "\n",
    "        Args:\n",
    "            params (dict or array): The parameters of the cylinder.\n",
    "        Returns:\n",
    "            df (DataFrame): A DataFrame containing the parameters.\n",
    "        \"\"\"\n",
    "        if self.from_fitter:\n",
    "            df = pd.DataFrame(params, columns=self.initial_guess_dataframe.columns)\n",
    "        else:\n",
    "            df = pd.DataFrame(params, index=[0])\n",
    "\n",
    "        return self.check_physical_validity(df)\n",
    "    \n",
    "    def check_physical_validity(self, params_df):\n",
    "        \"\"\"Checks if the parameters are physically valid. In this case, the radius and length of the cylinder should be positive.\n",
    "\n",
    "        Args:\n",
    "            params_df (DataFrame): A DataFrame containing the parameters.\n",
    "        Returns:\n",
    "            params_df_c (DataFrame): A DataFrame containing the parameters that are physically valid.\n",
    "        \n",
    "        \"\"\"\n",
    "\n",
    "        \n",
    "        params_df_c = params_df.copy()\n",
    "        keys = params_df_c.columns\n",
    "        \n",
    "        for key in keys:\n",
    "            if params_df[key].values[0] <= 0:\n",
    "                params_df_c.loc[params_df_c[key] <= 0, key] = np.nan\n",
    "\n",
    "        return params_df_c\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Separating the diffraction logic from the geometry\n",
    "\n",
    "The following class is to separate the diffraction logic from the geometry. This is useful when you have a complex geometry and you want to separate the geometry from the diffraction logic."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "class CylinderDiffraction():\n",
    "    \"\"\"Class for simulating diffraction from a cylinder.\"\"\"\n",
    "\n",
    "    def __init__(self, CylinderGeometry):\n",
    "        \"\"\"Initialize the CylinderDiffraction object.\n",
    "\n",
    "        Args:\n",
    "            CylinderGeometry: object containing the geometric properties of the cylinder.\n",
    "            xp: module, optional, Module to use for mathematical operations. Default is numpy.\n",
    "        \"\"\"\n",
    "        self.CylinderGeometry = CylinderGeometry\n",
    "\n",
    "    def bessel_j1(self, x):\n",
    "        \"\"\"\n",
    "        Approximate the Bessel function of the first kind J1(x).\n",
    "        The approximation is valid for small to moderately large x.\n",
    "        \"\"\"\n",
    "        # Use a series expansion for small x\n",
    "        result = 0\n",
    "        factorial = 1\n",
    "        x2 = x ** 2\n",
    "        term = x / 2\n",
    "        for n in range(1, 10):  # 10 terms for a decent approximation\n",
    "            factorial *= n\n",
    "            term *= (-1) * x2 / (4 * n * (n + 1))\n",
    "            result += term\n",
    "    \n",
    "        return result\n",
    "\n",
    "    def calculate_intensity(self, qys, qzs, params):\n",
    "        \"\"\"Calculate the diffraction intensity of the cylinder.\n",
    "\n",
    "        Args:\n",
    "            qys, qzs: array-like, The q-values in the y and z directions.\n",
    "            geometry_params: dict, Parameters for the cylinder geometry.\n",
    "\n",
    "        Returns:\n",
    "            intensity: array-like, Simulated diffraction intensity.\n",
    "        \"\"\"\n",
    "        #get the dataframe containing the parameters\n",
    "        params = self.CylinderGeometry.convert_to_dataframe(params)\n",
    "        height = params['height'].values\n",
    "        radius = params['radius'].values\n",
    "        density = params['density'].values\n",
    "\n",
    "\n",
    "        height = height[..., np.newaxis]\n",
    "        radius = radius[..., np.newaxis]\n",
    "        density = density[..., np.newaxis]\n",
    "\n",
    "        # Simplified form factor calculation for a cylinder\n",
    "        form_factor = np.sinc(qzs * height / 2) * self.bessel_j1( qys*radius ) / (qys * radius)\n",
    "        intensity = density * form_factor**2\n",
    "        \n",
    "        return intensity"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now you can use this model to simulate the diffraction and you can use the `Fitter` class to fit the simulated data to the experimental data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Intensity(A.U.)')"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Example Usage\n",
    "# Define the cylinder dimensions\n",
    "radius = 50.  # in arbitrary units\n",
    "height = 100.  # in arbitrary units\n",
    "density = 10E-3  # in arbitrary units\n",
    "\n",
    "# Define the q-space grid\n",
    "qys = np.linspace(-0.1, 0.1, 100)  # qy range\n",
    "qzs = np.linspace(-0.1, 0.1, 100)  # qz range\n",
    "\n",
    "# Create a simulation object\n",
    "cylinder_sim = CylinderSimulation(qys=qys, qzs=qzs)\n",
    "\n",
    "# Calculate the intensity\n",
    "intensity = cylinder_sim.simulate_diffraction(params={'radius': radius, 'height': height, 'density': density})\n",
    "\n",
    "# Output the intensity array\n",
    "import matplotlib.pyplot as plt\n",
    "plt.plot(qys, intensity)\n",
    "plt.xlabel('qy')\n",
    "plt.ylabel('Intensity(A.U.)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Start CMAES\n",
      "gen\tnevals\tavg    \tstd    \tmin    \tmax    \tfin  \n",
      "1  \t200   \t233.262\t80.6471\t135.371\t429.445\t0.245\n",
      "2  \t200   \t314.815\t114.571\t130.915\t653.277\t0.715\n",
      "3  \t200   \t276.81 \t107.234\t129.292\t516.864\t0.38 \n",
      "4  \t200   \t265.197\t151.812\t0      \t620.97 \t1    \n",
      "5  \t200   \t357.904\t128.323\t159.782\t611.096\t0.215\n",
      "6  \t200   \t315.257\t116.888\t121.962\t790.554\t0.33 \n",
      "7  \t200   \t308.891\t98.0072\t133.562\t516.678\t0.48 \n",
      "8  \t200   \t230.252\t149.535\t0      \t721.486\t1    \n",
      "9  \t200   \t318.519\t126.966\t88.6564\t680.663\t0.355\n",
      "10 \t200   \t264.668\t101.159\t123.782\t631.803\t0.65 \n",
      "11 \t200   \t213.086\t138.512\t0      \t727.891\t1    \n",
      "12 \t200   \t133.439\t158.754\t0      \t623.208\t0.495\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/nobackup/nd276333/Workspace/cdsaxs/src/cdsaxs/residual.py:126: RuntimeWarning: invalid value encountered in log10\n",
      "  error = self.xp.nansum(self.xp.abs((self.xp.log10(exp_i_array) - self.xp.log10(sim_i_array))), axis=1)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13 \t200   \t299.068\t117.924\t135.115\t679.371\t0.235\n",
      "14 \t200   \t285.005\t93.4288\t119.722\t690.007\t0.68 \n",
      "15 \t200   \t195.911\t144.583\t0      \t948.044\t1    \n",
      "16 \t200   \t291.216\t97.5352\t121.216\t566.565\t0.35 \n",
      "17 \t200   \t208.878\t156.587\t0      \t543.623\t1    \n",
      "18 \t200   \t352.514\t133.962\t140.851\t924.107\t0.28 \n",
      "19 \t200   \t121.238\t153.878\t0      \t588.26 \t0.465\n",
      "20 \t200   \t342.373\t144.674\t130.789\t789.37 \t0.295\n",
      "21 \t200   \t447.011\t229.718\t139.927\t1267.52\t0.68 \n",
      "22 \t200   \t263.277\t239.462\t0      \t1259.55\t1    \n",
      "23 \t200   \t449.334\t294.143\t130.381\t1744.9 \t0.315\n",
      "24 \t200   \t307.823\t120.628\t123.619\t698.616\t0.2  \n",
      "25 \t200   \t413.994\t277.034\t134.397\t1882.29\t0.68 \n",
      "26 \t200   \t203.999\t175.945\t0      \t653.568\t0.49 \n",
      "27 \t200   \t423.34 \t228.083\t134.353\t1253.97\t0.37 \n",
      "28 \t200   \t138.608\t153.31 \t0      \t536.982\t0.455\n",
      "29 \t200   \t129.8  \t229.494\t0      \t1322.04\t1    \n",
      "30 \t200   \t28.909 \t134.489\t0      \t1356.42\t0.835\n",
      "31 \t200   \t692.468\t616.582\t137.49 \t2648.74\t0.12 \n",
      "32 \t200   \t42.682 \t133.479\t0      \t772.677\t0.49 \n",
      "33 \t200   \t235.485\t519.285\t0      \t2215.89\t1    \n",
      "34 \t200   \t899.569\t612.543\t121.08 \t2293.35\t0.16 \n",
      "35 \t200   \t1386.72\t1002.39\t140.424\t3500.5 \t0.56 \n",
      "36 \t200   \t133.229\t255.941\t0      \t1227.77\t0.51 \n",
      "37 \t200   \t352.59 \t744.925\t0      \t3194.89\t1    \n",
      "38 \t200   \t1853.93\t1039.86\t241.073\t3363.82\t0.135\n",
      "39 \t200   \t2023.15\t1268.3 \t142.443\t4463.35\t0.55 \n",
      "40 \t200   \t2432.82\t1230.99\t141.122\t4428.93\t0.575\n",
      "41 \t200   \t164.718\t421.187\t0      \t1958.4 \t0.505\n",
      "42 \t200   \t2324.49\t1257.98\t134.182\t4704.66\t0.215\n",
      "43 \t200   \t2864.64\t1461.83\t139.945\t5764.33\t0.595\n",
      "44 \t200   \t197.69 \t530.606\t0      \t2729.79\t0.53 \n",
      "45 \t200   \t3021.62\t1469.42\t220.723\t5566.7 \t0.26 \n",
      "46 \t200   \t3261.53\t1435.97\t159.424\t5447.3 \t0.54 \n",
      "47 \t200   \t183.023\t552.861\t0      \t2762.83\t0.495\n",
      "48 \t200   \t3311.25\t1434.07\t185.299\t6252.52\t0.315\n",
      "49 \t200   \t2549.7 \t2461.61\t0      \t6733.19\t1    \n",
      "50 \t200   \t3985.67\t1423.42\t853.428\t6182.97\t0.185\n",
      "51 \t200   \t296.151\t954.19 \t0      \t4306.76\t0.5  \n",
      "52 \t200   \t5079.75\t1643.84\t1476.99\t8173.2 \t0.34 \n",
      "53 \t200   \t397.44 \t1052.25\t0      \t4353.5 \t0.47 \n",
      "54 \t200   \t6017.08\t1804.07\t524.877\t8363.08\t0.27 \n",
      "55 \t200   \t5828.76\t1827.54\t180.6  \t8180.34\t0.55 \n",
      "56 \t200   \t469.546\t1304.17\t0      \t5410.44\t0.57 \n",
      "57 \t200   \t5813.31\t1457.75\t1706.74\t8638.85\t0.27 \n",
      "58 \t200   \t253.155\t900.029\t0      \t4343.47\t0.51 \n",
      "59 \t200   \t5521.87\t1695.6 \t1171.41\t8080.83\t0.225\n",
      "60 \t200   \t70.7735\t386.057\t0      \t2617.9 \t0.49 \n",
      "61 \t200   \t108.883\t624.492\t0      \t4798.36\t0.73 \n",
      "62 \t200   \t5977.56\t1919.28\t1250.97\t8854.87\t0.195\n",
      "63 \t200   \t143.317\t810.346\t0      \t5601.97\t0.5  \n",
      "64 \t200   \t7451.09\t1817.76\t1157.06\t10577.5\t0.305\n",
      "65 \t200   \t8034.67\t1999.27\t1483.14\t10508  \t0.535\n",
      "66 \t200   \t779.554\t1811.46\t0      \t6939.55\t0.5  \n",
      "67 \t200   \t312.222\t1235.51\t0      \t6993.1 \t0.82 \n",
      "68 \t200   \t7799.69\t1588.52\t4605.69\t10371.6\t0.17 \n",
      "69 \t200   \t8667.47\t1773.35\t2754.1 \t10964.1\t0.56 \n",
      "70 \t200   \t387.788\t1442.73\t0      \t6321.83\t0.51 \n",
      "71 \t200   \t7776.73\t2042.43\t340.166\t10636.2\t0.245\n",
      "72 \t200   \t565.441\t1651.31\t0      \t6695.03\t0.51 \n",
      "73 \t200   \t7944.08\t2028.36\t2237.84\t10719.6\t0.225\n",
      "74 \t200   \t438.166\t1522.35\t0      \t7576.39\t0.5  \n",
      "75 \t200   \t8343.2 \t2004.11\t2801.16\t11592.4\t0.22 \n",
      "76 \t200   \t442.685\t1579.08\t0      \t7223.79\t0.465\n",
      "77 \t200   \t2099.52\t3680.05\t0      \t11359.6\t1    \n",
      "78 \t200   \t8099.63\t2033.16\t2814.48\t11403.8\t0.15 \n",
      "79 \t200   \t76.1554\t726.476\t0      \t7006.3 \t0.46 \n",
      "80 \t200   \t8489.44\t2089.04\t2918.21\t11614.9\t0.25 \n",
      "81 \t200   \t0      \t0      \t0      \t0      \t0.47 \n",
      "82 \t200   \t33.1145\t398.752\t0      \t4834.72\t0.73 \n",
      "83 \t200   \t8526.17\t1997.45\t3136.06\t10993.6\t0.115\n",
      "84 \t200   \t10011.5\t1600.62\t3824.49\t12781.6\t0.56 \n",
      "85 \t200   \t221.329\t1024.86\t0      \t6776.99\t0.505\n",
      "86 \t200   \t9139.38\t2383.75\t1028.46\t12360.3\t0.195\n",
      "87 \t200   \t10050.9\t1634.93\t2678.48\t12186.1\t0.565\n",
      "88 \t200   \t9237.57\t1838.58\t705.675\t11510  \t0.475\n",
      "89 \t200   \t436.905\t1525.72\t0      \t7154.92\t0.52 \n",
      "90 \t200   \t183.105\t1047.71\t0      \t7412.47\t0.805\n",
      "91 \t200   \t7846.67\t1988.36\t4115.8 \t10813.6\t0.13 \n",
      "92 \t200   \t121.278\t750.566\t0      \t5854.77\t0.475\n",
      "93 \t200   \t77.8574\t686.207\t0      \t6640.01\t0.78 \n",
      "94 \t200   \t9067.38\t1678.26\t5246.24\t12140.4\t0.11 \n",
      "95 \t200   \t10851.4\t1571.14\t4828.92\t12954.8\t0.51 \n",
      "96 \t200   \t10173.6\t1814.31\t3374.11\t12430.4\t0.545\n",
      "97 \t200   \t204.624\t1075.44\t0      \t6848.21\t0.52 \n",
      "98 \t200   \t9349.76\t1828.5 \t4266.29\t12527.1\t0.295\n",
      "99 \t200   \t199.077\t1167.08\t0      \t7820.67\t0.515\n",
      "100\t200   \t96.1027\t835.101\t0      \t7437.49\t0.765\n",
      "Iteration terminated due to ngen criterion after 100 gens\n",
      "('best', [-7.619581238518905, -18.136391660691814, -6.613894242094069], 0.0)\n",
      "   radius  height  density\n",
      "0     NaN     NaN      NaN\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/nobackup/nd276333/Workspace/cdsaxs/src/cdsaxs/fitter.py:289: RuntimeWarning: invalid value encountered in scalar divide\n",
      "  if(n_infs / fitness_arr.shape[0] > 0.5):\n"
     ]
    }
   ],
   "source": [
    "from cdsaxs.fitter import Fitter\n",
    "Simulation2 = CylinderSimulation(qys=qys, qzs=qzs, initial_guess={'radius': 50, 'height': 100, 'density': 10E-3})\n",
    "\n",
    "Fitter1 = Fitter(Simulation=Simulation2, exp_data=intensity)\n",
    "\n",
    "best_fit, best_fitness = Fitter1.cmaes(sigma=10, ngen=100, popsize=200, mu=10, n_default=3, restarts=0, tolhistfun=10E-5, ftarget=None, restart_from_best=True, verbose=True)\n",
    "\n",
    "print(best_fit)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
