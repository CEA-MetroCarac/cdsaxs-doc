{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tutorial for Stacked Trapezoid model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This tutorial shows how to do simulations for stacked trapezoid model and how to fit the experimental data using this model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from cdsaxs.simulations.stacked_trapezoid import StackedTrapezoidSimulation\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Simulation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Prepare the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "pitch = 100 #nm distance between two lines\n",
    "qzs = np.linspace(-0.5, 0.5, 121)\n",
    "qxs = 2 * np.pi / pitch * np.ones_like(qzs)\n",
    "\n",
    "#parameters\n",
    "dwx = 0.1\n",
    "dwz = 0.1\n",
    "i0 = 10\n",
    "bkg = 0.1\n",
    "y1 = 0.\n",
    "height = 20. #same as [20., 20.]\n",
    "bot_cd = 40.\n",
    "swa = [80., 80.0]\n",
    "\n",
    "langle = np.deg2rad(np.asarray(swa))\n",
    "rangle = np.deg2rad(np.asarray(swa))\n",
    "\n",
    "#simulation data\n",
    "i_params = {'heights': height,\n",
    "            'langles': langle,\n",
    "            'rangles': rangle,\n",
    "            'y_start': y1,\n",
    "            'bot_cd': bot_cd,\n",
    "            'dwx': dwx,\n",
    "            'dwz': dwz,\n",
    "            'i0': i0,\n",
    "            'bkg_cste': bkg,\n",
    "            }"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Description of the parameters:\n",
    "\n",
    "dwx, dwz, i0 and bkg are the parameters necessary to calculate the Debye-waller factor which accounts for the real world imperfections in the model. You can read more about it [here](https://en.wikipedia.org/wiki/Debye%E2%80%93Waller_factor).\n",
    "\n",
    "The other parameters are the geometrical parameters of the model. The parameters are as follows:\n",
    "\n",
    "*y_start* - starting y-coordinate of the base of the nano structure\n",
    "\n",
    "*bot_cd* - bottom width (CD for critical dimension) of the nano structure\n",
    "\n",
    "*heights* - height of each individual trapezoid can be a single value or a list of values \n",
    "in case of list of values, each value corresponds to the height of each individual trapezoid.\n",
    "\n",
    "*langles* - list of all the left bottom angles of each individual trapezoid. The dictionary which is passed should have it in radians.\n",
    "\n",
    "*rangles* - list of all the right bottom angles of each individual trapezoid. The dictionary which is passed should have it in radians.\n",
    "\n",
    "*weight* - weight of each individual trapezoid to account for the fact that they could be made of different materials. here we will assume that all the trapezoids are made of the same material hence the weight is not necessary.\n",
    "\n",
    "Note: In symmetric case either left or right angle can be passed and the other will be calculated using the symmetry.\n",
    "\n",
    "\n",
    "So we are constructing a line space pattern and the cross section of each line looks like following:\n",
    "\n",
    "![double trapezoid](../../../assets/images/double_stack.png)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Create instance of the Simulation class and call `simulate_diffraction` method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Stacked Trapezoid diffraction simulation')"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "Simulation1 = StackedTrapezoidSimulation(qys=qxs, qzs=qzs)\n",
    "\n",
    "intensity = Simulation1.simulate_diffraction(params=i_params)\n",
    "\n",
    "#plot\n",
    "import matplotlib.pyplot as plt\n",
    "plt.plot(qzs, intensity)\n",
    "plt.xlabel(r'$q_{z}$')\n",
    "plt.ylabel('Intensity')\n",
    "plt.title('Stacked Trapezoid diffraction simulation')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fitting"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A txt or csv file with the experimental data containing the values for $Q_{x}$, $Q_{z}$ and intensities can be in the format as shown below:\n",
    "    \n",
    "    ```\n",
    "    qx, qz, intensity\n",
    "    0.1, 0.2, 0.3\n",
    "    0.2, 0.3, 0.4\n",
    "    0.3, 0.4, 0.5\n",
    "    ...\n",
    "    ```\n",
    "\n",
    "for a text file you can read the data using the following code:\n",
    "\n",
    "```python\n",
    "import numpy as np\n",
    "data = np.genfromtxt('path_to_file.txt', delimiter=',', skip_header=1)\n",
    "qx = data[:,0]\n",
    "qz = data[:,1]\n",
    "intensity = data[:,2]\n",
    "```\n",
    "\n",
    "We will suppose that we've read the data and stored it in the variables qx, qz and intensity. And we'll use the simulated intensities used in the previous section."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's introduce a bit of noise to the simulated intensities to make it more realistic."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7cf5a17f8490>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "intensity_noisy = intensity + np.sqrt(intensity) * np.random.normal(0, 300, intensity.shape)\n",
    "plt.plot(qzs, intensity, label='original')\n",
    "plt.plot(qzs, intensity_noisy, label='added noise')\n",
    "plt.ylabel('Intensity')\n",
    "plt.xlabel('qz')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have our experimental data good to go for the fitting we need to provide a list of initial values and bounds for the parameters. The bounds are necessary to make sure that the fitting algorithm doesn't lose its way looking for impossible values. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "initial_params = {'heights': {'value': height+2, 'variation': 10E-1},\n",
    "                    'langles': {'value': langle-0.2, 'variation': 10E-1},\n",
    "                    'rangles': {'value': rangle-0.50, 'variation': 10E-1},\n",
    "                    'y_start': {'value': y1+1, 'variation': 10E-1},\n",
    "                    'bot_cd': {'value': bot_cd-1, 'variation': 10E-2},\n",
    "                    'dwx': {'value': dwx, 'variation': 10E-5},\n",
    "                    'dwz': {'value': dwz, 'variation': 10E-5},\n",
    "                    'i0': {'value': i0, 'variation': 10E-5},\n",
    "                    'bkg_cste': {'value': bkg, 'variation': 10E-5}\n",
    "                    }"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create an instance of the Simulation class and pass it to the Fitter class along with data to fit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "from cdsaxs.fitter import Fitter\n",
    "Simulation2 = StackedTrapezoidSimulation(use_gpu=False, qys=qxs, qzs=qzs, initial_guess=initial_params)\n",
    "\n",
    "Fitter1 = Fitter(Simulation=Simulation2, exp_data=intensity)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then we'll call the `cmaes` method of the Fitter class to fit the data. It's important to know that this method provides a normalized set of values between -sigma and sigma and it is rescaled to the parameter values according to the model used.\n",
    "\n",
    "*sigma* - the standard deviation of the values generated by the `cmaes` method.\n",
    "\n",
    "          Note: Similar to bound denoted by variation the parameter sigma helps to control the exploration of the algorithm. The larger the value of sigma the further the algorithm explores the parameter space and vice versa. Thus they need to be adjusted for the algorithm to converge to the optimal solution. \n",
    "\n",
    "*ngen* - the number of generations to run the algorithm\n",
    "\n",
    "*popsize* - the population size\n",
    "\n",
    "*mu* - the number of parents to select for the next generation\n",
    "\n",
    "*n_default* - the number parameters to fit\n",
    "\n",
    "*restarts* - the number of times to restart the algorithm\n",
    "\n",
    "*tolhistfun* - the tolerance for the history of the function value\n",
    "\n",
    "*ftarget* - the target fitness value\n",
    "\n",
    "*restart_from_best* - whether to restart from the best solution found so far\n",
    "\n",
    "*verbose* - whether to print the progress of the algorithm\n",
    "\n",
    "*dir_save* - the directory to save the results of the fitting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Iteration terminated due to ngen criterion after 100 gens\n",
      "Doubled popsize\n",
      "Iteration terminated due to ngen criterion after 100 gens\n",
      "     height1   langle1   langle2  rangle1   rangle2   y_start     bot_cd  \\\n",
      "0  20.000472  1.395713  1.396464  1.39704  1.395909  3.115344  39.990726   \n",
      "\n",
      "        dwx       dwz        i0  bkg_cste  \n",
      "0  0.099895  0.099972  9.999777  0.100125  \n"
     ]
    }
   ],
   "source": [
    "bestfit, fitness = Fitter1.cmaes(sigma=1, ngen=100, popsize=500, mu=10, n_default=11, restarts=1, tolhistfun=10E-5, ftarget=0, restart_from_best=True, verbose=False)\n",
    "print(bestfit)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we have the bestfit parameters in the form of a pandas dataframe. We will look at the statistical information generated by the `mcmc_bestfit_stats` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11 parameters\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 100/100 [00:02<00:00, 37.32it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "               mean       std  count        min        max   lower_ci  \\\n",
      "height1   20.006504  0.114185  33211  19.161739  20.895523  20.004890   \n",
      "langle1    1.425582  0.223816  33211   0.001393   3.072958   1.422419   \n",
      "langle2    1.430582  0.188886  33211   0.027713   2.838559   1.427912   \n",
      "rangle1    1.463491  0.209591  33211   0.028910   3.134754   1.460528   \n",
      "rangle2    1.416376  0.223697  33211   0.000645   3.132805   1.413214   \n",
      "y_start    3.094505  0.243718  33211   0.731132   5.008785   3.091060   \n",
      "bot_cd    39.986612  0.021570  33211  39.833996  40.158385  39.986307   \n",
      "dwx        0.099891  0.000023  33211   0.099660   0.100052   0.099891   \n",
      "dwz        0.099969  0.000030  33211   0.099561   0.100279   0.099969   \n",
      "i0         9.999774  0.000023  33211   9.999504   9.999964   9.999774   \n",
      "bkg_cste   0.100127  0.000027  33211   0.099858   0.100435   0.100127   \n",
      "\n",
      "           upper_ci  uncertainity  \n",
      "height1   20.008118  1.614033e-03  \n",
      "langle1    1.428746  3.163707e-03  \n",
      "langle2    1.433252  2.669954e-03  \n",
      "rangle1    1.466453  2.962627e-03  \n",
      "rangle2    1.419538  3.162018e-03  \n",
      "y_start    3.097950  3.445021e-03  \n",
      "bot_cd    39.986917  3.048968e-04  \n",
      "dwx        0.099891  3.299119e-07  \n",
      "dwz        0.099970  4.215146e-07  \n",
      "i0         9.999774  3.283757e-07  \n",
      "bkg_cste   0.100128  3.800473e-07  \n"
     ]
    }
   ],
   "source": [
    "with np.errstate(divide='ignore', invalid='ignore', over='ignore'):\n",
    "    stats = Fitter1.mcmc_bestfit_stats(N=11, sigma = 1., nsteps=100, nwalkers=500)\n",
    "\n",
    "    print(stats)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
